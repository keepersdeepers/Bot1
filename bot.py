import telebot
import sqlite3
from config import TOKEN, ADMIN_ID
from database import (
    init_db, create_deal, get_deals_by_status, update_deal_status, get_deal_by_id,
    get_or_create_user, get_user_balance, update_user_balance, get_user_rating,
    add_transaction, get_user_transactions, get_all_users, admin_update_balance,
    toggle_user_freeze, update_user_rating
)
from keyboards import (
    main_menu, buyer_confirm_keyboard, after_payment_keyboard, confirm_receive_keyboard,
    personal_cabinet_keyboard, balance_keyboard, admin_menu_keyboard, admin_user_actions_keyboard
)

bot = telebot.TeleBot(TOKEN)

init_db()

# –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞
def notify_seller(deal_id, message_text):
    """–£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞ –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤ —Å–¥–µ–ª–∫–µ"""
    deal = get_deal_by_id(deal_id)
    if deal and deal.seller_id:
        try:
            bot.send_message(deal.seller_id, message_text)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–∞ {deal.seller_id}: {e}")

# -----------------------
# –ö–æ–º–∞–Ω–¥–∞ /start
# -----------------------
@bot.message_handler(commands=['start'])
def start(msg):
    get_or_create_user(msg.from_user.id, msg.from_user.username)
    bot.send_message(msg.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ì–∞—Ä–∞–Ω—Ç –ë–æ—Ç –¥–ª—è Telegram Gifts. MakarGarant.\n\n"
                                  "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –∏ –ø–æ–∫—É–ø–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏ üéÅ", 
                                  reply_markup=main_menu())

# -----------------------
# –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
# -----------------------
@bot.message_handler(func=lambda message: message.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
def personal_cabinet(message):
    user_id = message.from_user.id
    get_or_create_user(user_id, message.from_user.username)
    
    balance = get_user_balance(user_id)
    rating, deals_count = get_user_rating(user_id)
    
    text = (
        f"üë§ *–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç*\n\n"
        f"üí≥ –ë–∞–ª–∞–Ω—Å: *{balance:.2f}‚ÇΩ*\n"
        f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: *{rating:.1f}/5*\n"
        f"üìä –°–¥–µ–ª–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: *{deals_count}*\n"
        f"üÜî ID: `{user_id}`\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    bot.send_message(message.chat.id, text, 
                     parse_mode="Markdown",
                     reply_markup=personal_cabinet_keyboard())

# -----------------------
# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
# -----------------------
@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    bot.send_message(message.chat.id, "‚öôÔ∏è *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*", 
                     parse_mode="Markdown",
                     reply_markup=admin_menu_keyboard())

# -----------------------
# Inline-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
# -----------------------
@bot.callback_query_handler(func=lambda c: c.data == "balance")
def show_balance(call):
    user_id = call.from_user.id
    balance = get_user_balance(user_id)
    
    text = (
        f"üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å*\n\n"
        f"üí≥ –î–æ—Å—Ç—É–ø–Ω–æ: *{balance:.2f}‚ÇΩ*\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏–ª–∏ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞."
    )
    
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id,
                         parse_mode="Markdown", reply_markup=balance_keyboard())

@bot.callback_query_handler(func=lambda c: c.data == "rating_info")
def show_rating(call):
    user_id = call.from_user.id
    rating, deals_count = get_user_rating(user_id)
    
    text = (
        f"‚≠ê *–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥*\n\n"
        f"üìä –¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: *{rating:.1f}/5*\n"
        f"üéØ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: *{deals_count}*\n\n"
        f"–†–µ–π—Ç–∏–Ω–≥ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∑—ã–≤–æ–≤\n"
        f"–ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫."
    )
    
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id,
                         parse_mode="Markdown", reply_markup=personal_cabinet_keyboard())

@bot.callback_query_handler(func=lambda c: c.data == "transaction_history")
def show_transaction_history(call):
    user_id = call.from_user.id
    transactions = get_user_transactions(user_id, 10)
    
    if not transactions:
        text = "üìã *–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π*\n\n–û–ø–µ—Ä–∞—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç."
    else:
        text = "üìã *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏*\n\n"
        for trans in transactions:
            amount, trans_type, description, date = trans
            emoji = "üìà" if amount > 0 else "üìâ"
            sign = "+" if amount > 0 else ""
            text += f"{emoji} {sign}{amount:.2f}‚ÇΩ - {description}\n"
            text += f"üïí {date[:16]}\n\n"
    
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id,
                         parse_mode="Markdown", reply_markup=personal_cabinet_keyboard())

@bot.callback_query_handler(func=lambda c: c.data == "deposit")
def ask_deposit_amount(call):
    bot.send_message(call.message.chat.id, 
                    "üí≥ *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞*\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500):",
                    parse_mode="Markdown")
    bot.register_next_step_handler(call.message, process_deposit)

def process_deposit(message):
    try:
        amount = float(message.text)
        if amount <= 0:
            bot.send_message(message.chat.id, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
            
        user_id = message.from_user.id
        update_user_balance(user_id, amount)
        add_transaction(user_id, amount, "deposit", "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞")
        
        bot.send_message(message.chat.id, 
                        f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ *{amount:.2f}‚ÇΩ*\n"
                        f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: *{get_user_balance(user_id):.2f}‚ÇΩ*",
                        parse_mode="Markdown")
        
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")

@bot.callback_query_handler(func=lambda c: c.data == "withdraw")
def ask_withdraw_amount(call):
    user_id = call.from_user.id
    balance = get_user_balance(user_id)
    
    if balance <= 0:
        bot.send_message(call.message.chat.id, "‚ùå –ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
        return
        
    bot.send_message(call.message.chat.id, 
                    f"üí≥ *–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤*\n\n"
                    f"–î–æ—Å—Ç—É–ø–Ω–æ: {balance:.2f}‚ÇΩ\n"
                    f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:",
                    parse_mode="Markdown")
    bot.register_next_step_handler(call.message, process_withdraw)

def process_withdraw(message):
    try:
        amount = float(message.text)
        user_id = message.from_user.id
        balance = get_user_balance(user_id)
        
        if amount <= 0:
            bot.send_message(message.chat.id, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
            
        if amount > balance:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
            return
            
        update_user_balance(user_id, -amount)
        add_transaction(user_id, -amount, "withdrawal", "–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        bot.send_message(ADMIN_ID,
                        f"üö® –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤\n"
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
                        f"üí∞ –°—É–º–º–∞: {amount:.2f}‚ÇΩ\n"
                        f"üí≥ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞: {get_user_balance(user_id):.2f}‚ÇΩ")
        
        bot.send_message(message.chat.id, 
                        f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ *{amount:.2f}‚ÇΩ* –ø—Ä–∏–Ω—è—Ç–∞!\n"
                        f"–û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                        parse_mode="Markdown")
        
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")

# -----------------------
# –ê–¥–º–∏–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
# -----------------------
@bot.callback_query_handler(func=lambda c: c.data == "admin_all_users")
def show_all_users(call):
    if call.from_user.id != ADMIN_ID:
        return
        
    users = get_all_users()
    
    if not users:
        text = "üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏*\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç."
    else:
        text = "üë• *–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏*\n\n"
        for user in users:
            user_id, username, balance, rating, is_frozen = user
            status = "‚ùÑÔ∏è –ó–ê–ú–û–†–û–ñ–ï–ù" if is_frozen else "‚úÖ –ê–ö–¢–ò–í–ï–ù"
            text += f"üë§ {username or '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: {user_id})\n"
            text += f"üí∞ {balance:.2f}‚ÇΩ | ‚≠ê {rating:.1f} | {status}\n\n"
    
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id,
                         parse_mode="Markdown", reply_markup=admin_menu_keyboard())

@bot.callback_query_handler(func=lambda c: c.data == "admin_change_balance")
def ask_admin_user_id(call):
    if call.from_user.id != ADMIN_ID:
        return
        
    bot.send_message(call.message.chat.id, 
                    "üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:")
    bot.register_next_step_handler(call.message, ask_admin_balance_amount)

def ask_admin_balance_amount(message):
    try:
        user_id = int(message.text)
        bot.send_message(message.chat.id, 
                        f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (–¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∏–Ω—É—Å):")
        bot.register_next_step_handler(message, lambda m: process_admin_balance(m, user_id))
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

def process_admin_balance(message, user_id):
    try:
        amount = float(message.text)
        admin_update_balance(user_id, amount)
        add_transaction(user_id, amount, "admin_adjustment", "–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        
        new_balance = get_user_balance(user_id)
        
        bot.send_message(message.chat.id,
                        f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {amount:+.2f}‚ÇΩ\n"
                        f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance:.2f}‚ÇΩ")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            bot.send_message(user_id,
                           f"‚ÑπÔ∏è –í–∞—à –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
                           f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {amount:+.2f}‚ÇΩ\n"
                           f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance:.2f}‚ÇΩ")
        except:
            pass
            
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")

@bot.callback_query_handler(func=lambda c: c.data == "admin_toggle_freeze")
def ask_freeze_user_id(call):
    if call.from_user.id != ADMIN_ID:
        return
        
    bot.send_message(call.message.chat.id, "üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–º–æ—Ä–æ–∑–∫–∏/—Ä–∞–∑–º–æ—Ä–æ–∑–∫–∏:")
    bot.register_next_step_handler(call.message, process_admin_freeze)

def process_admin_freeze(message):
    try:
        user_id = int(message.text)
        toggle_user_freeze(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users = get_all_users()
        user_data = next((u for u in users if u[0] == user_id), None)
        
        if user_data:
            _, username, balance, rating, is_frozen = user_data
            status = "‚ùÑÔ∏è –ó–ê–ú–û–†–û–ñ–ï–ù" if is_frozen else "‚úÖ –†–ê–ó–ú–û–†–û–ñ–ï–ù"
            
            bot.send_message(message.chat.id,
                           f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username or '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: {user_id}) {status}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                bot.send_message(user_id,
                               f"‚ÑπÔ∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª {'–∑–∞–º–æ—Ä–æ–∂–µ–Ω' if is_frozen else '—Ä–∞–∑–º–æ—Ä–æ–∂–µ–Ω'} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            except:
                pass
        else:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

# -----------------------
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏
# -----------------------
@bot.callback_query_handler(func=lambda c: c.data.startswith("received_"))
def mark_received(call):
    deal_id = int(call.data.split("_")[1])
    update_deal_status(deal_id, "completed")
    
    deal = get_deal_by_id(deal_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞ (–ø–æ–∫–∞ —Å—Ç–∞–≤–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ 5 –∑–≤–µ–∑–¥)
    # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –æ—Ç–∑—ã–≤–æ–≤
    update_user_rating(deal.seller_id, 5)
    
    # –ù–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–æ–¥–∞–≤—Ü—É
    try:
        price = float(''.join(filter(str.isdigit, deal.price)))
        update_user_balance(deal.seller_id, price)
        add_transaction(deal.seller_id, price, "income", f"–û–ø–ª–∞—Ç–∞ –∑–∞ —Å–¥–µ–ª–∫—É #{deal_id}")
    except:
        pass
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    notify_seller(deal_id,
        f"üéâ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"üéÅ {deal.gift_name}\n"
        f"üí∞ {deal.price}\n"
        f"‚úÖ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞.\n"
        f"‚≠ê –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ —É–ª—É—á—à–µ–Ω!\n\n"
        f"–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.")
    
    bot.send_message(call.message.chat.id, 
                    "üéâ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥–∞—Ä–∞–Ω—Ç–∞ üíé")
    bot.send_message(ADMIN_ID, f"‚úÖ –°–¥–µ–ª–∫–∞ #{deal_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

# -----------------------
# –ù–∞–≤–∏–≥–∞—Ü–∏—è
# -----------------------
@bot.callback_query_handler(func=lambda c: c.data == "back_to_cabinet")
@bot.callback_query_handler(func=lambda c: c.data == "refresh_cabinet")
def back_to_cabinet(call):
    personal_cabinet(call.message)

@bot.callback_query_handler(func=lambda c: c.data == "back_to_main")
def back_to_main(call):
    bot.send_message(call.message.chat.id, "üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                     reply_markup=main_menu())

# -----------------------
# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–º–æ–∏ —Å–¥–µ–ª–∫–∏, —Å–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –∏ —Ç.–¥.)
# -----------------------
@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –ú–æ–∏ —Å–¥–µ–ª–∫–∏")
def my_deals(message):
    user_id = message.from_user.id

    conn = sqlite3.connect("deals.db")
    cur = conn.cursor()
    cur.execute("""
        SELECT id, gift_name, price, status
        FROM deals
        WHERE seller_id=? OR buyer_id=?
    """, (user_id, user_id))
    deals = cur.fetchall()
    conn.close()

    if not deals:
        bot.send_message(message.chat.id, "‚ùå –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.", reply_markup=main_menu())
        return

    text = "üì¶ –¢–≤–æ–∏ —Å–¥–µ–ª–∫–∏:\n\n"
    for d in deals:
        deal_id, gift_name, price, status = d
        status_text = {
            "waiting_buyer": "–û–∂–∏–¥–∞–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è",
            "waiting_payment": "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã",
            "waiting_gift": "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥–∞—Ä–æ–∫",
            "completed": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞",
            "dispute": "‚ö†Ô∏è –û—Ç–∫—Ä—ã—Ç —Å–ø–æ—Ä",
            "cancelled": "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞"
        }.get(status, status)
        text += f"#{deal_id} ‚Äî {gift_name} ({price}‚ÇΩ)\n–°—Ç–∞—Ç—É—Å: {status_text}\n\n"

    bot.send_message(message.chat.id, text, reply_markup=main_menu())

@bot.message_handler(func=lambda m: m.text == "üì¶ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É")
def ask_gift_name(msg):
    bot.send_message(msg.chat.id, "üéÅ –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞:")
    bot.register_next_step_handler(msg, ask_price)

def ask_price(msg):
    gift_name = msg.text
    bot.send_message(msg.chat.id, "üí∞ –£–∫–∞–∂–∏ —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 500‚ÇΩ):")
    bot.register_next_step_handler(msg, lambda m: save_deal(m, gift_name))

def save_deal(msg, gift_name):
    price = msg.text
    create_deal(msg.chat.id, gift_name, price)
    bot.send_message(msg.chat.id, f"‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n–ü–æ–¥–∞—Ä–æ–∫: {gift_name}\n–¶–µ–Ω–∞: {price}\n\n"
                                  "–¢–µ–ø–µ—Ä—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –µ—ë –Ω–∞–π—Ç–∏ –∏ –∫—É–ø–∏—Ç—å.")

@bot.message_handler(func=lambda m: m.text == "üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫")
def show_deals(msg):
    deals = get_deals_by_status("waiting_buyer")
    if not deals:
        bot.send_message(msg.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π üòï")
        return
    for deal in deals:
        deal_id, seller_id, gift_name, price = deal
        bot.send_message(msg.chat.id,
                         f"üéÅ {gift_name}\nüí∞ –¶–µ–Ω–∞: {price}\nüë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: [{seller_id}](tg://user?id={seller_id})",
                         parse_mode="Markdown",
                         reply_markup=buyer_confirm_keyboard(deal_id))

@bot.callback_query_handler(func=lambda c: c.data.startswith("buy_"))
def confirm_buy(call):
    deal_id = int(call.data.split("_")[1])
    deal = get_deal_by_id(deal_id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º
    if call.from_user.id == deal.seller_id:
        bot.answer_callback_query(call.id, "‚ùå –¢—ã –Ω–µ –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å —Å–≤–æ–π –∂–µ –ø–æ–¥–∞—Ä–æ–∫.")
        return
    
    update_deal_status(deal_id, "waiting_payment", call.from_user.id)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
    notify_seller(deal_id, 
        f"üéâ –¢–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫ –ø–æ–∫—É–ø–∞—é—Ç!\n"
        f"üéÅ {deal.gift_name}\n"
        f"üí∞ {deal.price}\n"
        f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: [{call.from_user.id}](tg://user?id={call.from_user.id})\n\n"
        f"–û–∂–∏–¥–∞–µ–º –æ–ø–ª–∞—Ç—É –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è...")
    
    bot.send_message(call.message.chat.id, "üí≥ –û—Ç–ø—Ä–∞–≤—å –æ–ø–ª–∞—Ç—É –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≥–∞—Ä–∞–Ω—Ç–∞:\n"
                                           "`@admin_username` –∏–ª–∏ TON-–∫–æ—à–µ–ª—ë–∫.\n\n"
                                           "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã ‚Äî –Ω–∞–∂–º–∏ '–Ø –æ–ø–ª–∞—Ç–∏–ª'.", 
                                           parse_mode="Markdown",
                                           reply_markup=after_payment_keyboard(deal_id))
                                           
@bot.callback_query_handler(func=lambda c: c.data.startswith("paid_"))
def mark_paid(call):
    deal_id = int(call.data.split("_")[1])
    update_deal_status(deal_id, "waiting_gift")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
    notify_seller(deal_id,
        f"üí∞ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–∞—Ä–æ–∫!\n"
        f"üéÅ {get_deal_by_id(deal_id).gift_name}\n"
        f"üíé –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é.\n\n"
        f"–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ ‚Äî –ø–æ–ø—Ä–æ—Å–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ.")
    
    bot.send_message(call.message.chat.id, "‚úÖ –û–ø–ª–∞—Ç–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞. –û–∂–∏–¥–∞–µ–º –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞.",
                     reply_markup=confirm_receive_keyboard(deal_id))
    bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –°–¥–µ–ª–∫–∞ #{deal_id} –æ–ø–ª–∞—á–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤.")

@bot.callback_query_handler(func=lambda c: c.data.startswith("cancel_"))
def cancel_deal(call):
    deal_id = int(call.data.split("_")[1])
    deal = get_deal_by_id(deal_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–æ –æ—Ç–º–µ–Ω—è—Ç—å —Å–¥–µ–ª–∫—É
    if call.from_user.id not in [deal.seller_id, deal.buyer_id]:
        bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏")
        return
    
    update_deal_status(deal_id, "cancelled")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Ç–æ—Ä—É—é —Å—Ç–æ—Ä–æ–Ω—É
    if call.from_user.id == deal.seller_id:
        notify_user = deal.buyer_id
        role = "–ø—Ä–æ–¥–∞–≤–µ—Ü"
    else:
        notify_user = deal.seller_id
        role = "–ø–æ–∫—É–ø–∞—Ç–µ–ª—å"
    
    if notify_user:
        try:
            bot.send_message(notify_user, 
                           f"‚ùå –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞\n"
                           f"üéÅ {deal.gift_name}\n"
                           f"üë§ {role} –æ—Ç–º–µ–Ω–∏–ª —Å–¥–µ–ª–∫—É")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {notify_user}: {e}")
    
    bot.send_message(call.message.chat.id, "‚ùå –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

@bot.callback_query_handler(func=lambda c: c.data.startswith("dispute_"))
def open_dispute(call):
    deal_id = int(call.data.split("_")[1])
    deal = get_deal_by_id(deal_id)
    update_deal_status(deal_id, "dispute")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Ç–æ—Ä—É—é —Å—Ç–æ—Ä–æ–Ω—É –æ —Å–ø–æ—Ä–µ
    if call.from_user.id == deal.seller_id:
        notify_user = deal.buyer_id
        role = "–ø—Ä–æ–¥–∞–≤–µ—Ü"
    else:
        notify_user = deal.seller_id
        role = "–ø–æ–∫—É–ø–∞—Ç–µ–ª—å"
    
    if notify_user:
        try:
            bot.send_message(notify_user,
                           f"‚ö†Ô∏è –û—Ç–∫—Ä—ã—Ç —Å–ø–æ—Ä –ø–æ —Å–¥–µ–ª–∫–µ\n"
                           f"üéÅ {deal.gift_name}\n"
                           f"üë§ {role} –æ—Ç–∫—Ä—ã–ª —Å–ø–æ—Ä\n\n"
                           f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Å–∏—Ç—É–∞—Ü–∏–∏")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {notify_user}: {e}")
    
    bot.send_message(ADMIN_ID, 
                    f"üö® –û—Ç–∫—Ä—ã—Ç —Å–ø–æ—Ä –ø–æ —Å–¥–µ–ª–∫–µ #{deal_id}\n"
                    f"üéÅ {deal.gift_name}\n"
                    f"üí∞ {deal.price}\n"
                    f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {deal.seller_id}\n"
                    f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {deal.buyer_id}\n"
                    f"üö© –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä —Å–ø–æ—Ä–∞: {call.from_user.id}")
    
    bot.send_message(call.message.chat.id, "‚ö†Ô∏è –°–ø–æ—Ä –æ—Ç–∫—Ä—ã—Ç. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")

if __name__ == "__main__":
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ ‚úÖ")
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üöÄ")
    bot.polling(none_stop=True)
```
